name: CI_ESP_IDF_master

on:
  push:
  pull_request:
  schedule:
    - cron: "50 8 * * *"

env:
  rust_toolchain: nightly

jobs:
  compile:
    name: Build | Clippy | Fmt Check (esp32c3)
    runs-on: ubuntu-latest
    steps:
      - name: Setup | Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.rust_toolchain }}
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
      - name: Setup | Std
        run: rustup component add rust-src --toolchain ${{ env.rust_toolchain }}-x86_64-unknown-linux-gnu
      - name: Setup | Default to nightly
        run: rustup default ${{ env.rust_toolchain }}
      - name: Setup | cargo-generate (binary)
        id: cargo-generate-binary
        continue-on-error: true
        run: |
          sudo curl -L "https://github.com/cargo-generate/cargo-generate/releases/latest/download/cargo-generate-$(git ls-remote --refs --sort="version:refname" --tags "https://github.com/cargo-generate/cargo-generate" | cut -d/ -f3- | tail -n1)-x86_64-unknown-linux-gnu.tar.gz" -o "/home/runner/.cargo/bin/cargo-generate.tar.gz"
          tar xf "/home/runner/.cargo/bin/cargo-generate.tar.gz" -C /home/runner/.cargo/bin
          chmod u+x /home/runner/.cargo/bin/cargo-generate
      - name: Setup | cargo-generate (cargo)
        if: steps.cargo-generate-binary.outcome != 'success'
        run: cargo install cargo-generate
      - name: Setup | ldproxy (binary)
        id: ldproxy-binary
        continue-on-error: true
        run: |
          sudo curl -L "https://github.com/esp-rs/embuild/releases/latest/download/ldproxy-x86_64-unknown-linux-gnu.zip" -o "/home/runner/.cargo/bin/ldproxy.zip"
          unzip "/home/runner/.cargo/bin/ldproxy.zip" -d "/home/runner/.cargo/bin/"
          chmod u+x /home/runner/.cargo/bin/ldproxy
      - name: Setup | ldproxy
        if: steps.ldproxy-binary.outcome != 'success'
        run: cargo install ldproxy
      # - name: (STD, PIO, V4.3.2) Generate (PR)
      #   if: ${{ github.event_name == 'pull_request' }}
      #   run: cargo generate --git https://github.com/${{ github.event.pull_request.head.repo.full_name }} --branch ${{ github.head_ref }} cargo --name test --vcs none --silent -d mcu=esp32c3 -d std=true -d espidfver=v4.3.2 -d devcontainer=false
      # - name: (STD, PIO, V4.3.2) Generate
      #   if: ${{ github.event_name != 'pull_request' }}
      #   run: cargo generate --git https://github.com/esp-rs/esp-idf-template --branch ${{ github.ref_name }} cargo --name test --vcs none --silent -d mcu=esp32c3 -d std=true -d espidfver=v4.3.2 -d devcontainer=false
      # - name: (STD, PIO, V4.3.2) Build | Fmt Check
      #   run: cd test; cargo fmt -- --check
      # - name: (STD, PIO, V4.3.2) Build | Clippy
      #   run: cd test; cargo clippy --features pio --no-deps -- -Dwarnings
      # - name: (STD, PIO, V4.3.2) Build | Compile
      #   run: cd test; cargo build --features pio
      - uses: Swatinem/rust-cache@v1
      - uses: actions/checkout@v3
        with:
          path: /home/runner/work/esp-idf-template/esp-idf-template/github-esp-idf-template
      - name: (NOSTD, NATIVE, master) Generate
        run: cargo generate --path /home/runner/work/esp-idf-template/esp-idf-template/github-esp-idf-template cargo --name testnostd --vcs none --silent -d mcu=esp32c3 -d std=false -d espidfver=mainline -d devcontainer=false
      - name: (NOSTD, NATIVE, master) Build | Fmt Check
        run: cd testnostd; cargo fmt -- --check
      - name: (NOSTD, NATIVE, master) Build | Clippy
        run: cd testnostd; cargo clippy --no-deps -- -Dwarnings
      - name: (NOSTD, NATIVE, master) Build | Compile
        run: cd testnostd; cargo build
      - name: (NOSTD, NATIVE, master) Generate
        run: cargo generate --path /home/runner/work/esp-idf-template/esp-idf-template/github-esp-idf-template cmake --name testidf --vcs none --silent -d toolchain=nightly -d std=true -d espidfver=mainline -d hal="Yes (default features)"
      - name: (STD, CMake, master) ESP-IDF | Checkout
        run: git clone https://github.com/espressif/esp-idf; git -C esp-idf checkout master
      - name: (STD, CMake, master) ESP-IDF | Install Tooling
        run: esp-idf/install.sh
      - name: (STD, CMake, master) Build | Set Target
        run: . esp-idf/export.sh; cd testidf; idf.py set-target esp32c3
      - name: (STD, CMake, master) Build | Compile
        run: . esp-idf/export.sh; cd testidf; idf.py build
  devcontainer-check:
    name: Build using the generated Dockerfile
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        board: ["esp32", "esp32s2", "esp32s3", "esp32c3"]
        std: ["true", "false"]
    steps:
      - run: rustup toolchain install stable --profile minimal
      - uses: Swatinem/rust-cache@v2
      - name: Install cargo-generate via binaries
        id: binaries
        continue-on-error: true
        run: |
          sudo curl -L "https://github.com/cargo-generate/cargo-generate/releases/latest/download/cargo-generate-$(git ls-remote --refs --sort="version:refname" --tags "https://github.com/cargo-generate/cargo-generate" | cut -d/ -f3- | tail -n1)-x86_64-unknown-linux-gnu.tar.gz" -o "/home/runner/.cargo/bin/cargo-generate.tar.gz"
          tar xf "/home/runner/.cargo/bin/cargo-generate.tar.gz" -C /home/runner/.cargo/bin
          chmod u+x /home/runner/.cargo/bin/cargo-generate
      - name: Install cargo-generate via cargo
        if: steps.binaries.outcome != 'success'
        run: cargo install cargo-generate
      - uses: Swatinem/rust-cache@v1
      - uses: actions/checkout@v3
        with:
          path: /home/runner/work/esp-idf-template/esp-idf-template/github-esp-idf-template
      - name: Generate Project
        run: cargo generate --path /home/runner/work/esp-idf-template/esp-idf-template/github-esp-idf-template cargo --name test-${{ matrix.board }} --vcs none --silent -d mcu=${{ matrix.board }}  -d std=${{ matrix.std }} -d espidfver=mainline -d devcontainer=true -d hal="Yes (default features)"
      - name: Update ownership
        run: |
          sudo chown 1000:1000 -R test-${{ matrix.board }}
      - uses: docker/build-push-action@v2
        with:
          context: .
          tags: test-${{ matrix.board }}:latest
          build-args: ESP_BOARD=${{ matrix.board }}
          file: test-${{ matrix.board }}/.devcontainer/Dockerfile
          push: false
      - name: Run the build process with Docker
        uses: addnab/docker-run-action@v3
        with:
          image: test-${{ matrix.board }}:latest
          options: -u esp -v ${{ github.workspace }}/test-${{ matrix.board }}:/home/esp/test-${{ matrix.board }}
          run: |
            cd /home/esp/test-${{ matrix.board }}
            bash -c 'source /home/esp/export-esp.sh && cargo build'
